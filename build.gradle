/*
 * This file is part of JavaASV, an open-source ASV navigation controller.
 * Copyright (C) 2020  Max Haland
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

plugins {
    id 'java'

    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.10.2'
}

group 'org.haland'
version 'a-0.1'

repositories {
    mavenCentral()
    jcenter()
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }

    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }

    integrationTest {
        java {
            compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
            runtimeClasspath += output + compileClasspath
            srcDirs = ['src/integration-test/java']
        }
        resources {
            srcDirs = ['src/integration-test/resources']
        }
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile 'com.fazecast:jSerialComm:[2.0.0,3.0.0)'
    testCompile "org.mockito:mockito-core:2.+"
    testCompile "org.mockito:mockito-junit-jupiter:3.+"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.+'
    testImplementation 'org.awaitility:awaitility:4.0.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.+'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

task integrationTest(type: Test) {
    useJUnitPlatform()
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen {false}
    mustRunAfter test
}

jacocoTestReport {
    def coverageSourceDirs = ['src/main/java']
    dependsOn test
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
    getSourceDirectories().setFrom(files(coverageSourceDirs))
    getClassDirectories().setFrom(fileTree(
            dir: "${project.buildDir}/classes/main",
            excludes: []
    ))
}

coveralls {
    sourceDirs += ['src/main/java']
    jacocoReportPath 'build/reports/jacoco/test/jacocoTestReport.xml'
}

check.dependsOn integrationTest